<?php
/**
 * AccountsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  MittwaldApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public API
 *
 * Schnittstellen fÃ¼r Mittwald-Kunden
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MittwaldApi\Functions;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MittwaldApi\ApiException;
use MittwaldApi\Configuration;
use MittwaldApi\HeaderSelector;
use MittwaldApi\ObjectSerializer;

/**
 * AccountsApi Class Doc Comment
 *
 * @category Class
 * @package  MittwaldApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAccount
     *
     * Account auslesen
     *
     * @param  string $account_identifier Name oder ID eines Accounts (required)
     *
     * @throws \MittwaldApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MittwaldApi\Model\Account|\MittwaldApi\Model\Error
     */
    public function getAccount($account_identifier)
    {
        list($response) = $this->getAccountWithHttpInfo($account_identifier);
        return $response;
    }

    /**
     * Operation getAccountWithHttpInfo
     *
     * Account auslesen
     *
     * @param  string $account_identifier Name oder ID eines Accounts (required)
     *
     * @throws \MittwaldApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MittwaldApi\Model\Account|\MittwaldApi\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountWithHttpInfo($account_identifier)
    {
        $request = $this->getAccountRequest($account_identifier);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\MittwaldApi\Model\Account' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MittwaldApi\Model\Account', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MittwaldApi\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MittwaldApi\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MittwaldApi\Model\Account';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MittwaldApi\Model\Account',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MittwaldApi\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountAsync
     *
     * Account auslesen
     *
     * @param  string $account_identifier Name oder ID eines Accounts (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountAsync($account_identifier)
    {
        return $this->getAccountAsyncWithHttpInfo($account_identifier)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountAsyncWithHttpInfo
     *
     * Account auslesen
     *
     * @param  string $account_identifier Name oder ID eines Accounts (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountAsyncWithHttpInfo($account_identifier)
    {
        $returnType = '\MittwaldApi\Model\Account';
        $request = $this->getAccountRequest($account_identifier);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccount'
     *
     * @param  string $account_identifier Name oder ID eines Accounts (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountRequest($account_identifier)
    {
        // verify the required parameter 'account_identifier' is set
        if ($account_identifier === null || (is_array($account_identifier) && count($account_identifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_identifier when calling getAccount'
            );
        }

        $resourcePath = '/accounts/{accountIdentifier}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_identifier !== null) {
            $resourcePath = str_replace(
                '{' . 'accountIdentifier' . '}',
                ObjectSerializer::toPathValue($account_identifier),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAccountsByCustomer
     *
     * Accounts eines Kunden
     *
     * @param  int $customer_number Kundennummer (required)
     * @param  bool $advised Dieser Parameter steuert, ob auch Accounts zurÃ¼ckgeliefert werden sollen, fÃ¼r die eine Verwaltungsfreigabe besteht, aber nicht zur Kundennummer &#x60;{customerNumber}&#x60; gehÃ¶ren.&#39; (optional, default to false)
     * @param  bool $owned Dieser Parameter steuert, ob Accounts zurÃ¼ckgeliefert werden sollen, die direkt der Kundennummer &#x60;{customerNumber}&#x60; gehÃ¶ren. Dieser Parameter hat standardmÃ¤Ãig den Wert &#x60;true&#x60;; Ã¼ber den Wert &#x60;false&#x60; kÃ¶nnen in Kombination mit dem Parameter &#x60;advised&#x60; ausschlieÃlich Accounts abgefragt werden, fÃ¼r die eine Verwaltungsfreigabe besteht. (optional, default to true)
     *
     * @throws \MittwaldApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MittwaldApi\Model\Account[]
     */
    public function listAccountsByCustomer($customer_number, $advised = false, $owned = true)
    {
        list($response) = $this->listAccountsByCustomerWithHttpInfo($customer_number, $advised, $owned);
        return $response;
    }

    /**
     * Operation listAccountsByCustomerWithHttpInfo
     *
     * Accounts eines Kunden
     *
     * @param  int $customer_number Kundennummer (required)
     * @param  bool $advised Dieser Parameter steuert, ob auch Accounts zurÃ¼ckgeliefert werden sollen, fÃ¼r die eine Verwaltungsfreigabe besteht, aber nicht zur Kundennummer &#x60;{customerNumber}&#x60; gehÃ¶ren.&#39; (optional, default to false)
     * @param  bool $owned Dieser Parameter steuert, ob Accounts zurÃ¼ckgeliefert werden sollen, die direkt der Kundennummer &#x60;{customerNumber}&#x60; gehÃ¶ren. Dieser Parameter hat standardmÃ¤Ãig den Wert &#x60;true&#x60;; Ã¼ber den Wert &#x60;false&#x60; kÃ¶nnen in Kombination mit dem Parameter &#x60;advised&#x60; ausschlieÃlich Accounts abgefragt werden, fÃ¼r die eine Verwaltungsfreigabe besteht. (optional, default to true)
     *
     * @throws \MittwaldApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MittwaldApi\Model\Account[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listAccountsByCustomerWithHttpInfo($customer_number, $advised = false, $owned = true)
    {
        $request = $this->listAccountsByCustomerRequest($customer_number, $advised, $owned);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\MittwaldApi\Model\Account[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MittwaldApi\Model\Account[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MittwaldApi\Model\Account[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MittwaldApi\Model\Account[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAccountsByCustomerAsync
     *
     * Accounts eines Kunden
     *
     * @param  int $customer_number Kundennummer (required)
     * @param  bool $advised Dieser Parameter steuert, ob auch Accounts zurÃ¼ckgeliefert werden sollen, fÃ¼r die eine Verwaltungsfreigabe besteht, aber nicht zur Kundennummer &#x60;{customerNumber}&#x60; gehÃ¶ren.&#39; (optional, default to false)
     * @param  bool $owned Dieser Parameter steuert, ob Accounts zurÃ¼ckgeliefert werden sollen, die direkt der Kundennummer &#x60;{customerNumber}&#x60; gehÃ¶ren. Dieser Parameter hat standardmÃ¤Ãig den Wert &#x60;true&#x60;; Ã¼ber den Wert &#x60;false&#x60; kÃ¶nnen in Kombination mit dem Parameter &#x60;advised&#x60; ausschlieÃlich Accounts abgefragt werden, fÃ¼r die eine Verwaltungsfreigabe besteht. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAccountsByCustomerAsync($customer_number, $advised = false, $owned = true)
    {
        return $this->listAccountsByCustomerAsyncWithHttpInfo($customer_number, $advised, $owned)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAccountsByCustomerAsyncWithHttpInfo
     *
     * Accounts eines Kunden
     *
     * @param  int $customer_number Kundennummer (required)
     * @param  bool $advised Dieser Parameter steuert, ob auch Accounts zurÃ¼ckgeliefert werden sollen, fÃ¼r die eine Verwaltungsfreigabe besteht, aber nicht zur Kundennummer &#x60;{customerNumber}&#x60; gehÃ¶ren.&#39; (optional, default to false)
     * @param  bool $owned Dieser Parameter steuert, ob Accounts zurÃ¼ckgeliefert werden sollen, die direkt der Kundennummer &#x60;{customerNumber}&#x60; gehÃ¶ren. Dieser Parameter hat standardmÃ¤Ãig den Wert &#x60;true&#x60;; Ã¼ber den Wert &#x60;false&#x60; kÃ¶nnen in Kombination mit dem Parameter &#x60;advised&#x60; ausschlieÃlich Accounts abgefragt werden, fÃ¼r die eine Verwaltungsfreigabe besteht. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAccountsByCustomerAsyncWithHttpInfo($customer_number, $advised = false, $owned = true)
    {
        $returnType = '\MittwaldApi\Model\Account[]';
        $request = $this->listAccountsByCustomerRequest($customer_number, $advised, $owned);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAccountsByCustomer'
     *
     * @param  int $customer_number Kundennummer (required)
     * @param  bool $advised Dieser Parameter steuert, ob auch Accounts zurÃ¼ckgeliefert werden sollen, fÃ¼r die eine Verwaltungsfreigabe besteht, aber nicht zur Kundennummer &#x60;{customerNumber}&#x60; gehÃ¶ren.&#39; (optional, default to false)
     * @param  bool $owned Dieser Parameter steuert, ob Accounts zurÃ¼ckgeliefert werden sollen, die direkt der Kundennummer &#x60;{customerNumber}&#x60; gehÃ¶ren. Dieser Parameter hat standardmÃ¤Ãig den Wert &#x60;true&#x60;; Ã¼ber den Wert &#x60;false&#x60; kÃ¶nnen in Kombination mit dem Parameter &#x60;advised&#x60; ausschlieÃlich Accounts abgefragt werden, fÃ¼r die eine Verwaltungsfreigabe besteht. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAccountsByCustomerRequest($customer_number, $advised = false, $owned = true)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling listAccountsByCustomer'
            );
        }

        $resourcePath = '/customers/{customerNumber}/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($advised)) {
            $advised = ObjectSerializer::serializeCollection($advised, '', true);
        }
        if ($advised !== null) {
            $queryParams['advised'] = $advised;
        }
        // query params
        if (is_array($owned)) {
            $owned = ObjectSerializer::serializeCollection($owned, '', true);
        }
        if ($owned !== null) {
            $queryParams['owned'] = $owned;
        }


        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSoftwareInstallationsByAccount
     *
     * Softwareinstallationen auslesen
     *
     * @param  string $account_identifier Name oder ID eines Accounts (required)
     * @param  string $install_path Filtert Software-Installationen nach Installationspfad (z.B. &#x60;&amp;installPath&#x3D;%2Fhtml%2Ftypo3&#x60;) (optional)
     *
     * @throws \MittwaldApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MittwaldApi\Model\SoftwareInstallation[]
     */
    public function listSoftwareInstallationsByAccount($account_identifier, $install_path = null)
    {
        list($response) = $this->listSoftwareInstallationsByAccountWithHttpInfo($account_identifier, $install_path);
        return $response;
    }

    /**
     * Operation listSoftwareInstallationsByAccountWithHttpInfo
     *
     * Softwareinstallationen auslesen
     *
     * @param  string $account_identifier Name oder ID eines Accounts (required)
     * @param  string $install_path Filtert Software-Installationen nach Installationspfad (z.B. &#x60;&amp;installPath&#x3D;%2Fhtml%2Ftypo3&#x60;) (optional)
     *
     * @throws \MittwaldApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MittwaldApi\Model\SoftwareInstallation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listSoftwareInstallationsByAccountWithHttpInfo($account_identifier, $install_path = null)
    {
        $request = $this->listSoftwareInstallationsByAccountRequest($account_identifier, $install_path);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\MittwaldApi\Model\SoftwareInstallation[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MittwaldApi\Model\SoftwareInstallation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MittwaldApi\Model\SoftwareInstallation[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MittwaldApi\Model\SoftwareInstallation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSoftwareInstallationsByAccountAsync
     *
     * Softwareinstallationen auslesen
     *
     * @param  string $account_identifier Name oder ID eines Accounts (required)
     * @param  string $install_path Filtert Software-Installationen nach Installationspfad (z.B. &#x60;&amp;installPath&#x3D;%2Fhtml%2Ftypo3&#x60;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSoftwareInstallationsByAccountAsync($account_identifier, $install_path = null)
    {
        return $this->listSoftwareInstallationsByAccountAsyncWithHttpInfo($account_identifier, $install_path)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSoftwareInstallationsByAccountAsyncWithHttpInfo
     *
     * Softwareinstallationen auslesen
     *
     * @param  string $account_identifier Name oder ID eines Accounts (required)
     * @param  string $install_path Filtert Software-Installationen nach Installationspfad (z.B. &#x60;&amp;installPath&#x3D;%2Fhtml%2Ftypo3&#x60;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSoftwareInstallationsByAccountAsyncWithHttpInfo($account_identifier, $install_path = null)
    {
        $returnType = '\MittwaldApi\Model\SoftwareInstallation[]';
        $request = $this->listSoftwareInstallationsByAccountRequest($account_identifier, $install_path);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSoftwareInstallationsByAccount'
     *
     * @param  string $account_identifier Name oder ID eines Accounts (required)
     * @param  string $install_path Filtert Software-Installationen nach Installationspfad (z.B. &#x60;&amp;installPath&#x3D;%2Fhtml%2Ftypo3&#x60;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSoftwareInstallationsByAccountRequest($account_identifier, $install_path = null)
    {
        // verify the required parameter 'account_identifier' is set
        if ($account_identifier === null || (is_array($account_identifier) && count($account_identifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_identifier when calling listSoftwareInstallationsByAccount'
            );
        }

        $resourcePath = '/accounts/{accountIdentifier}/installations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($install_path)) {
            $install_path = ObjectSerializer::serializeCollection($install_path, '', true);
        }
        if ($install_path !== null) {
            $queryParams['installPath'] = $install_path;
        }


        // path params
        if ($account_identifier !== null) {
            $resourcePath = str_replace(
                '{' . 'accountIdentifier' . '}',
                ObjectSerializer::toPathValue($account_identifier),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
