<?php
/**
 * ArticleBenefitsDnsEditor
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  MittwaldApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public API
 *
 * Schnittstellen fÃ¼r Mittwald-Kunden
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MittwaldApi\Model;

use \ArrayAccess;
use \MittwaldApi\ObjectSerializer;

/**
 * ArticleBenefitsDnsEditor Class Doc Comment
 *
 * @category Class
 * @package  MittwaldApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ArticleBenefitsDnsEditor implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Article_benefits_dnsEditor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'editor_a' => 'bool',
        'editor_cname' => 'bool',
        'editor_mx' => 'bool',
        'editor_srv' => 'bool',
        'editor_txt' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'editor_a' => null,
        'editor_cname' => null,
        'editor_mx' => null,
        'editor_srv' => null,
        'editor_txt' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'editor_a' => 'editorA',
        'editor_cname' => 'editorCNAME',
        'editor_mx' => 'editorMX',
        'editor_srv' => 'editorSRV',
        'editor_txt' => 'editorTXT'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'editor_a' => 'setEditorA',
        'editor_cname' => 'setEditorCname',
        'editor_mx' => 'setEditorMx',
        'editor_srv' => 'setEditorSrv',
        'editor_txt' => 'setEditorTxt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'editor_a' => 'getEditorA',
        'editor_cname' => 'getEditorCname',
        'editor_mx' => 'getEditorMx',
        'editor_srv' => 'getEditorSrv',
        'editor_txt' => 'getEditorTxt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = $data['active'] ?? null;
        $this->container['editor_a'] = $data['editor_a'] ?? null;
        $this->container['editor_cname'] = $data['editor_cname'] ?? null;
        $this->container['editor_mx'] = $data['editor_mx'] ?? null;
        $this->container['editor_srv'] = $data['editor_srv'] ?? null;
        $this->container['editor_txt'] = $data['editor_txt'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets editor_a
     *
     * @return bool|null
     */
    public function getEditorA()
    {
        return $this->container['editor_a'];
    }

    /**
     * Sets editor_a
     *
     * @param bool|null $editor_a editor_a
     *
     * @return self
     */
    public function setEditorA($editor_a)
    {
        $this->container['editor_a'] = $editor_a;

        return $this;
    }

    /**
     * Gets editor_cname
     *
     * @return bool|null
     */
    public function getEditorCname()
    {
        return $this->container['editor_cname'];
    }

    /**
     * Sets editor_cname
     *
     * @param bool|null $editor_cname editor_cname
     *
     * @return self
     */
    public function setEditorCname($editor_cname)
    {
        $this->container['editor_cname'] = $editor_cname;

        return $this;
    }

    /**
     * Gets editor_mx
     *
     * @return bool|null
     */
    public function getEditorMx()
    {
        return $this->container['editor_mx'];
    }

    /**
     * Sets editor_mx
     *
     * @param bool|null $editor_mx editor_mx
     *
     * @return self
     */
    public function setEditorMx($editor_mx)
    {
        $this->container['editor_mx'] = $editor_mx;

        return $this;
    }

    /**
     * Gets editor_srv
     *
     * @return bool|null
     */
    public function getEditorSrv()
    {
        return $this->container['editor_srv'];
    }

    /**
     * Sets editor_srv
     *
     * @param bool|null $editor_srv editor_srv
     *
     * @return self
     */
    public function setEditorSrv($editor_srv)
    {
        $this->container['editor_srv'] = $editor_srv;

        return $this;
    }

    /**
     * Gets editor_txt
     *
     * @return bool|null
     */
    public function getEditorTxt()
    {
        return $this->container['editor_txt'];
    }

    /**
     * Sets editor_txt
     *
     * @param bool|null $editor_txt editor_txt
     *
     * @return self
     */
    public function setEditorTxt($editor_txt)
    {
        $this->container['editor_txt'] = $editor_txt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


