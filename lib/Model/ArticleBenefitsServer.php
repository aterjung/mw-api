<?php
/**
 * ArticleBenefitsServer
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  MittwaldApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public API
 *
 * Schnittstellen fÃ¼r Mittwald-Kunden
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MittwaldApi\Model;

use \ArrayAccess;
use \MittwaldApi\ObjectSerializer;

/**
 * ArticleBenefitsServer Class Doc Comment
 *
 * @category Class
 * @package  MittwaldApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ArticleBenefitsServer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Article_benefits_server';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'hardware' => '\MittwaldApi\Model\ArticleBenefitsServerHardware',
        'backup' => '\MittwaldApi\Model\ArticleBenefitsServerBackup',
        'cron_job' => '\MittwaldApi\Model\ArticleBenefitsServerCronJob',
        'ssl' => '\MittwaldApi\Model\ArticleBenefitsServerSsl',
        'ip' => '\MittwaldApi\Model\ArticleBenefitsServerSsl',
        'ftp_user' => '\MittwaldApi\Model\ArticleBenefitsServerFtpUser',
        'ssh' => '\MittwaldApi\Model\ArticleBenefitsServerSsh'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'hardware' => null,
        'backup' => null,
        'cron_job' => null,
        'ssl' => null,
        'ip' => null,
        'ftp_user' => null,
        'ssh' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hardware' => 'hardware',
        'backup' => 'backup',
        'cron_job' => 'cronJob',
        'ssl' => 'ssl',
        'ip' => 'ip',
        'ftp_user' => 'ftpUser',
        'ssh' => 'ssh'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hardware' => 'setHardware',
        'backup' => 'setBackup',
        'cron_job' => 'setCronJob',
        'ssl' => 'setSsl',
        'ip' => 'setIp',
        'ftp_user' => 'setFtpUser',
        'ssh' => 'setSsh'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hardware' => 'getHardware',
        'backup' => 'getBackup',
        'cron_job' => 'getCronJob',
        'ssl' => 'getSsl',
        'ip' => 'getIp',
        'ftp_user' => 'getFtpUser',
        'ssh' => 'getSsh'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hardware'] = $data['hardware'] ?? null;
        $this->container['backup'] = $data['backup'] ?? null;
        $this->container['cron_job'] = $data['cron_job'] ?? null;
        $this->container['ssl'] = $data['ssl'] ?? null;
        $this->container['ip'] = $data['ip'] ?? null;
        $this->container['ftp_user'] = $data['ftp_user'] ?? null;
        $this->container['ssh'] = $data['ssh'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hardware
     *
     * @return \MittwaldApi\Model\ArticleBenefitsServerHardware|null
     */
    public function getHardware()
    {
        return $this->container['hardware'];
    }

    /**
     * Sets hardware
     *
     * @param \MittwaldApi\Model\ArticleBenefitsServerHardware|null $hardware hardware
     *
     * @return self
     */
    public function setHardware($hardware)
    {
        $this->container['hardware'] = $hardware;

        return $this;
    }

    /**
     * Gets backup
     *
     * @return \MittwaldApi\Model\ArticleBenefitsServerBackup|null
     */
    public function getBackup()
    {
        return $this->container['backup'];
    }

    /**
     * Sets backup
     *
     * @param \MittwaldApi\Model\ArticleBenefitsServerBackup|null $backup backup
     *
     * @return self
     */
    public function setBackup($backup)
    {
        $this->container['backup'] = $backup;

        return $this;
    }

    /**
     * Gets cron_job
     *
     * @return \MittwaldApi\Model\ArticleBenefitsServerCronJob|null
     */
    public function getCronJob()
    {
        return $this->container['cron_job'];
    }

    /**
     * Sets cron_job
     *
     * @param \MittwaldApi\Model\ArticleBenefitsServerCronJob|null $cron_job cron_job
     *
     * @return self
     */
    public function setCronJob($cron_job)
    {
        $this->container['cron_job'] = $cron_job;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return \MittwaldApi\Model\ArticleBenefitsServerSsl|null
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param \MittwaldApi\Model\ArticleBenefitsServerSsl|null $ssl ssl
     *
     * @return self
     */
    public function setSsl($ssl)
    {
        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return \MittwaldApi\Model\ArticleBenefitsServerSsl|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param \MittwaldApi\Model\ArticleBenefitsServerSsl|null $ip ip
     *
     * @return self
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets ftp_user
     *
     * @return \MittwaldApi\Model\ArticleBenefitsServerFtpUser|null
     */
    public function getFtpUser()
    {
        return $this->container['ftp_user'];
    }

    /**
     * Sets ftp_user
     *
     * @param \MittwaldApi\Model\ArticleBenefitsServerFtpUser|null $ftp_user ftp_user
     *
     * @return self
     */
    public function setFtpUser($ftp_user)
    {
        $this->container['ftp_user'] = $ftp_user;

        return $this;
    }

    /**
     * Gets ssh
     *
     * @return \MittwaldApi\Model\ArticleBenefitsServerSsh|null
     */
    public function getSsh()
    {
        return $this->container['ssh'];
    }

    /**
     * Sets ssh
     *
     * @param \MittwaldApi\Model\ArticleBenefitsServerSsh|null $ssh ssh
     *
     * @return self
     */
    public function setSsh($ssh)
    {
        $this->container['ssh'] = $ssh;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


